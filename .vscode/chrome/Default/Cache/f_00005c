function asm_async_obj()
{
 this.items = new Array();
 this.pageViewID = 'asm' + Math.round(Math.random() * 99999) + 'x' + (new Date()).getTime();
 this.win = window;
 this.doc = this.win.document;
 this.inswrapper = '';
 this.scrollAttached = false;
 this.scrollIntoObjects = new Array();


 this.fndwin = function(w, o)
 {
  try
  {
   var ifs = w.document.getElementsByTagName("iframe");
   for(var i = 0; i < ifs.length; i++)
   {
    try
    {
     if(ifs[i].contentWindow == o)
     {
      return ifs[i];
     }
    }
    catch(e)
    {
    }
   }
  }
  catch(e)
  {
  }
  return null;
 }

 this.checkFlash = function()
 {
  /* Original code by: Copyright (c) Copyright (c) 2007, Carl S. Yestrau All rights reserved. Code licensed under the BSD License: http://www.featureblend.com/license.txt Version: 1.0.4 */
  var major = -1;
  var activeXDetectRules = [
   {
    "name": "ShockwaveFlash.ShockwaveFlash.7",
    "version": function(obj)
    {
     return getActiveXVersion(obj);
    }
   }, {
    "name": "ShockwaveFlash.ShockwaveFlash.6",
    "version": function(obj)
    {
     var version = "6,0,21";
     try
     {
      obj.AllowScriptAccess = "always";
      version = getActiveXVersion(obj);
     }
     catch(err)
     {
     }
     return version;
    }
   }, {
    "name": "ShockwaveFlash.ShockwaveFlash",
    "version": function(obj)
    {
     return getActiveXVersion(obj);
    }
   }
  ];
  var getActiveXVersion = function(activeXObj)
  {
   var version = -1;
   try
   {
    version = activeXObj.GetVariable("$version");
   }
   catch(err)
   {
   }
   return version;
  };
  var getActiveXObject = function(name)
  {
   var obj = -1;
   try
   {
    obj = new ActiveXObject(name);
   }
   catch(err)
   {
    obj = {activeXError: true};
   }
   return obj;
  };
  var parseActiveXVersion = function(str)
  {
   var versionArray = str.split(",");
   return {"major": parseInt(versionArray[0].split(" ")[1], 10)};
  };
  var parseStandardVersion = function(str)
  {
   var descParts = str.split(/ +/);
   var majorMinor = descParts[2].split(/\./);
   return {"major": parseInt(majorMinor[0], 10)};
  };
  var parseRevisionStrToInt = function(str)
  {
   return parseInt(str.replace(/[a-zA-Z]/g, ""), 10) || self.revision;
  };

  if(navigator.plugins && navigator.plugins.length > 0)
  {
   var type = 'application/x-shockwave-flash';
   var mimeTypes = navigator.mimeTypes;
   if(mimeTypes && mimeTypes[type] && mimeTypes[type].enabledPlugin && mimeTypes[type].enabledPlugin.description)
   {
    var version = mimeTypes[type].enabledPlugin.description;
    var versionObj = parseStandardVersion(version);
    major = versionObj.major;
   }
  }
  else if(navigator.appVersion.indexOf("Mac") == -1 && this.win.execScript)
  {
   var version = -1;
   for(var i = 0; i < activeXDetectRules.length && version == -1; i++)
   {
    var obj = getActiveXObject(activeXDetectRules[i].name);
    if(!obj.activeXError)
    {
     version = activeXDetectRules[i].version(obj);
     if(version != -1)
     {
      var versionObj = parseActiveXVersion(version);
      major = versionObj.major;
     }
    }
   }
  }
  return major;
 }
 this.swf = this.checkFlash();

 this.checkRef = function()
 {
  var asmref = location.toString();
  var asmdl = 0;
  var asmwin = self;
  var asmgt = false;
  if(self != top)
  {
   try
   {
    var asmtl = top.location.toString();
    asmref = asmtl;
    asmgt = true;
   }
   catch(e)
   {
   }
   if(!asmgt)
   {
    if(typeof(location.ancestorOrigins) == "object")
    {
     asmref = location.ancestorOrigins[location.ancestorOrigins.length - 1];
     asmgt = true;
    }
    else
    {
     while(asmwin && asmwin != top && asmdl < 100 && asmwin.parent)
     {
      var asmcw = asmwin;
      asmwin = asmwin.parent;
      if(asmwin.location)
      {
       try
       {
        asmref = asmwin.location.toString();
        asmgt = true;
       }
       catch(e)
       {
        if(asmcw != top)
        {
         if(asmcw.document)
         {
          asmref = typeof(asmcw.document.referrer) == "string" && asmcw.document.referrer != "" ? asmcw.document.referrer : asmref;
          asmgt = true;
         }
         else
         {
          asmref = typeof(asmcw.referrer) == "string" && asmcw.referrer != "" ? asmcw.referrer : asmref;
          asmgt = true;
         }
        }
        break
       }
      }
      asmdl++
     }
    }
   }
  }
  if(self == top || asmref == undefined || asmref == "" || asmref == "-" || asmref == "undefined" || typeof(asmref) == "undefined" || !asmgt)
  {
   asmref = self == top ? location.href : ( typeof(document.referrer) == "string" ? document.referrer : "");
  }
  return asmref;
 }
 this.ref = this.checkRef();

 this.asm_gp = function(e, w, h)
 {
  var o = this.doc.getElementById(e);
  if(!o || o == null)
  {
   return [0, 0, 0, 0, false]
  }
  var l = 0, t = 0;
  if(typeof w == "undefined" || w == null || isNaN(w))
  {
   w = o.offsetWidth
  }
  if(typeof h == "undefined" || h == null || isNaN(h))
  {
   h = o.offsetHeight
  }

  if(typeof w == "undefined" || w == null || isNaN(w) || w < 1)
  {
   w = 1
  }
  if(typeof h == "undefined" || h == null || isNaN(h) || h < 1)
  {
   h = 1
  }
  var z = 0;
  while(o.offsetParent !== null)
  {
   z++;
   if(z > 300)
   {
    break
   }
   l += o.offsetLeft;
   t += o.offsetTop;
   o = o.offsetParent
  }
  var u = [l, t, w, h, true];
  return u
 }
 this.asm_ds = function(e)
 {
  var w = 0, h = 0, sx=0, sy=0;
  if(e.innerHeight && typeof e.innerHeight == "number")
  {
   h = e.innerHeight;
  }
  else if(e.document.documentElement && e.document.documentElement.clientHeight && typeof e.document.documentElement.clientHeight == "number")
  {
   h = e.document.documentElement.clientHeight;
  }
  else if(e.document.body && e.document.body.clientHeight && typeof e.document.body.clientHeight == "number")
  {
   h = e.document.body.clientHeight
  }
  if(e.innerWidth && typeof e.innerWidth == "number")
  {
   w = e.innerWidth;
  }
  else if(e.document.documentElement && e.document.documentElement.clientWidth && typeof e.document.documentElement.clientWidth == "number")
  {
   w = e.document.documentElement.clientWidth;
  }
  else if(e.document.body && e.document.body.clientWidth && typeof e.document.body.clientWidth == "number")
  {
   w = e.document.body.clientWidth;
  }

  if(e.pageXOffset && typeof e.pageXOffset == "number"){ sx = e.pageXOffset;  }
  else if(e.document.documentElement && e.document.documentElement.scrollLeft && typeof e.document.documentElement.scrollLeft == "number"){sx = e.document.documentElement.scrollLeft; }
  if(e.pageYOffset && typeof e.pageYOffset == "number"){ sy = e.pageYOffset; }
  else if(e.document.documentElement && e.document.documentElement.scrollTop && typeof e.document.documentElement.scrollTop == "number"){sy = e.document.documentElement.scrollTop;}
  if(e.document.documentElement && e.document.documentElement.clientLeft && typeof e.document.documentElement.clientLeft == "number"){sx -= e.document.documentElement.clientLeft;}
  if(e.document.documentElement && e.document.documentElement.clientTop && typeof e.document.documentElement.clientTop == "number"){sy -= e.document.documentElement.clientTop;}
  return [w, h, sx, sy]
 }
 this.checkVisibility = function(id)
 {
  var e = this.doc.getElementById(id);
  var w = parseInt(e.style.width);
  var h = parseInt(e.style.height);
  var r = this.asm_gp(id, w, h);
  if(r[4] == false)
  {
   return -1
  }
  w = r[2];
  h = r[3];
  var i = this.asm_ds(this.win);
  if(i[0] == 0 || i[1] == 0)
  {
   return -1
  }
  if(i[0] < w + 100 && i[1] < h + 100)
  {
   return -1
  }
  var s = i[0] - Math.abs(r[0]);
  var o = i[1] - Math.abs(r[1]);
  var u = 0, a = 0, f = 0;
  if(s <= 0 || o <= 0)
  {
   u = 0
  }
  else
  {
   a = w * h;
   if(r[0] < r[1])
   {
    f = o * w
   }
   else if(r[0] == r[1])
   {
    f = s * o
   }
   else
   {
    f = s * h
   }
   if(a == 0)
   {
    u = 0;
   }
   else
   {
    u = Math.round(f * 100 / a);
   }
  }
  if(u >= 0 && u < 25)
  {
   return 0
  }
  else if(u >= 25 && u < 50)
  {
   return 1
  }
  else if(u >= 50 && u < 75)
  {
   return 2
  }
  else if(u >= 75 && u < 100)
  {
   return 3
  }
  else if(u >= 100)
  {
   return 4
  }
  else
  {
   return -1
  }
  return u;
 }

 this.checkInView = function(id)
 {
  var e = this.doc.getElementById(id);
  var w = parseInt(e.style.width);
  var h = parseInt(e.style.height);
  var r = this.asm_gp(id, w, h);
  if(r[4] == false)
  {
   return false
  }
  w = r[2];
  h = r[3];
  var i = this.asm_ds(this.win);
  if(i[0] == 0 || i[1] == 0)
  {
   return false
  }

  var pgx1 = i[2];
  var pgx2 = i[0]+i[2];
  var pgy1 = i[3];
  var pgy2 = i[1]+i[3];
  var dgx1 = r[0];
  var dgx2 = r[0]+r[2];
  var dgy1 = r[1];
  var dgy2 = r[1]+r[3];
  return (dgx1 < pgx2 && dgx2 > pgx1 && dgy1 < pgy2 && dgy2 > pgy1);

 }

 this.hasAttribute = function(node, attr)
 {
  if(node.hasAttribute)
  {
   return node.hasAttribute(attr);
  }
  else
  {
   return typeof node[attr] !== 'undefined';
  }
 }

 this.getElementsByClassName = function(node, classname)
 {
  var a = [];
  var re = new RegExp('(^| )' + classname + '( |$)');
  var els = node.getElementsByTagName("*");
  for(var i = 0, j = els.length; i < j; i++)
  {
   if(re.test(els[i].className))
   {
    a.push(els[i]);
   }
  }
  return a;
 }

 this.addScrollObject = function(id, url)
 {
  if(!this.scrollAttached)
  {
   this.scrollAttached = true;
   if(this.win.addEventListener)
   {
    this.win.addEventListener("resize", window.asm_async_data.handleScroll, false);
    this.win.addEventListener("scroll", window.asm_async_data.handleScroll, false);
    this.win.addEventListener("load", window.asm_async_data.handleScroll, false);
   }
   else if(this.win.attachEvent)
   {
    this.win.attachEvent("onresize", window.asm_async_data.handleScroll);
    this.win.attachEvent("onscroll", window.asm_async_data.handleScroll);
    this.win.attachEvent("onload", window.asm_async_data.handleScroll);
   }
  }

  var isInList = false;
  for(var j = 0; j < this.scrollIntoObjects.length; j++)
  {
   if(this.scrollIntoObjects[j].id == id)
   {
    isInList = true;
    break;
   }
  }

  if(!isInList)
  {
   this.scrollIntoObjects[this.scrollIntoObjects.length] = {
    "id": id,
    "url": url,
    "done": false
   };
  }
  window.asm_async_data.handleScroll();
 }

 this.scrollTimer = null;
 this.scrollTimer2 = null;
 this.scrollWaiting = false;
 this.handleScroll = function()
 {
  if(window.asm_async_data.scrollWaiting){ window.asm_async_data.handleScroll2(); return ; }
  if(window.asm_async_data.scrollTimer)
  {
   window.clearTimeout(window.asm_async_data.scrollTimer);
  }
  if(window.asm_async_data.scrollTimer2)
  {
   window.clearTimeout(window.asm_async_data.scrollTimer2);
  }
  window.asm_async_data.scrollTimer = window.setTimeout('window.asm_async_data.handleScroll2()', 200);
  window.asm_async_data.scrollTimer2 = window.setTimeout('window.asm_async_data.scrollWaiting = true', 500);
 }
 this.handleScroll2 = function()
 {
  window.asm_async_data.scrollWaiting = false;
  for(var j = 0; j < window.asm_async_data.scrollIntoObjects.length; j++)
  {
   if(!window.asm_async_data.scrollIntoObjects[j].done && window.asm_async_data.checkInView(window.asm_async_data.scrollIntoObjects[j].id))
   {
    window.asm_async_data.scrollIntoObjects[j].done = true;
    var s = document.createElement('script');
    s.src = window.asm_async_data.scrollIntoObjects[j].url;
    document.getElementById(window.asm_async_data.scrollIntoObjects[j].id).appendChild(s);
   }
  }
 }


 this.initi = function()
 {
  if(typeof(window.inDapIF) == "boolean" && window.inDapIF == true && self != top)
  {
   var e;
   try
   {
    var asm_iframe = this.fndwin(this.win.parent, window);
    if(asm_iframe != null)
    {
     this.win = this.win.parent;
     this.doc = this.win.document;
     var asm_ins = this.doc.createElement("ins");
     asm_ins.id = 'asm_indapif_' + Math.round(Math.random() * 999999);
     this.inswrapper = asm_ins.id;
     var xy = this.asm_ds(window);
     asm_ins.style.width = xy[0] + 'px';
     asm_ins.style.height = xy[1] + 'px';
     asm_ins.style.display = 'inline-block';
     asm_ins.style.textAlign = 'left';
     asm_iframe.parentNode.insertBefore(asm_ins, asm_iframe.nextSibling);
     asm_iframe.style.display = 'none';
    }
   }
   catch(e)
   {/*no friendly iframe*/
   }
  }


  if(document.getElementsByClassName)
  {
   var t = document.getElementsByClassName('asm_async_creative');
  }
  else
  {
   var t = this.getElementsByClassName(document, 'asm_async_creative');
  }
  for(var i = 0; i < t.length; i++)
  {
   if(this.hasAttribute(t[i], 'data-asm-host') && this.hasAttribute(t[i], 'data-asm-params') && !this.hasAttribute(t[i], 'data-asm-done'))
   {
    var id = 'p' + Math.round(Math.random() * 99999) + 'x' + i;
    if(!this.hasAttribute(t[i], 'id') || t[i].getAttribute('id') == '')
    {
     t[i].setAttribute('id', id);
    }
    else
    {
     id = t[i].getAttribute('id');
    }

    this.items[this.items.length] = {
     "id": id,
     "obj": t[i]
    };

    var h = t[i].getAttribute('data-asm-host');
    var p = t[i].getAttribute('data-asm-params');


    var r = '';
    var rc = 0;
    if(this.hasAttribute(t[i], 'data-asm-click'))
    {
     r = t[i].getAttribute('data-asm-click');
    }
    if(this.hasAttribute(t[i], 'data-asm-encode'))
    {
     rc = t[i].getAttribute('data-asm-encode');
    }

    if(this.inswrapper != '')
    {
     this.copyObject(t[i], this.doc.getElementById(this.inswrapper));
     var s = this.doc.createElement('script');
     s.src = '//' + h + '/adasync.js';
     this.doc.getElementById(this.inswrapper).appendChild(s);
    }
    else
    {
     t[i].setAttribute('data-asm-done', 1);
     var dcx = ("offsetWidth" in t[i] ? t[i].offsetWidth : 0);
     if(dcx < 1)
     {
      if("offsetParent" in t[i] && typeof(t[i].offsetParent) == "object" && t[i].offsetParent != null && "offsetWidth" in t[i].offsetParent)
      {
       dcx = t[i].offsetParent.offsetWidth;
      }
     }
     var url = '//' + h + '/ad' + (this.hasAttribute(t[i], 'data-asm-responsive') ? 'responsive' : '') + 'script.php?async=' + id + '&wpcn=' + this.pageViewID + '&ref=' + encodeURIComponent(this.ref) + '&swf=' + this.swf + '&scx=' + (screen.width) + '&scy=' + (screen.height) + '&wcx=' + ("innerWidth" in window ? window.innerWidth : page.clientWidth) + '&wcy=' + ("innerHeight" in window ? window.innerHeight : page.clientHeight) + '&dcx=' + dcx + '&vis=' + this.checkVisibility(id) + '&tz=' + (new Date()).getTime() + (r != '' ? '&prdclick_' + rc + '=' + encodeURIComponent(r) : '') + '&' + p;

     var scrollintoview = t[i].getAttribute('data-asm-scrollintoview');
     if(scrollintoview == '1' || scrollintoview == 'true' || scrollintoview == true)
     {
      if(!this.checkInView(id))
      {
       this.addScrollObject(id, url);
       return;
      }
     }
     var s = document.createElement('script');
     s.src = url;
     t[i].appendChild(s);

    }
   }
  }
 }

 this.copyObject = function(o, target)
 {
  if(o.nodeType == 1 && (o.nodeName.toLowerCase() == "div" || o.nodeName.toLowerCase() == "span" || o.nodeName.toLowerCase() == "ins"
   ))
  {
   var o2 = this.doc.createElement(o.nodeName.toLowerCase());
   o2.className = o.className;
   var oid = o.id;
   o.id += 'random' + Math.random() * 999999999;
   for(var i in o.style)
   {
    try
    {
     o2.style[i] = o.style[i]
    }
    catch(err)
    {
    }
   }
   if(o.attributes)
   {
    for(var i = 0; i < o.attributes.length; i++)
    {
     if(o.attributes[i].nodeName.substr(0, 5).toLowerCase() == 'data-')
     {
      try
      {
       o2.setAttribute(o.attributes[i].nodeName, o.attributes[i].value);
      }
      catch(err)
      {
       console.log(err);
      }
     }
    }
   }
   o2.id = oid;

   var dl = 0;
   while(o.firstChild && dl < 100)
   {
    dl++;
    this.copyObject(o.firstChild, o2)
   }

   o.parentNode.removeChild(o);
   target.appendChild(o2);
  }
  else if(o.nodeType == 1 && o.nodeName.toLowerCase() == "script")
  {
   if(o.src && o.src != '')
   {
    var src = o.src;
    o.parentNode.removeChild(o);
    this.writeScript(target, src, false);
   }
   else
   {
    var c = o.innerHTML.trim();
    o.parentNode.removeChild(o);
    if(c.substr(0, 4) == '<!--')
    {
     c = '//' + c.substr(4, c.length);
    }
    if(c.substr(0, 9) == '<![CDATA[')
    {
     c = c.substr(9, c.length);
    }
    if(c.substr(c.length - 3, 3) == '-->')
    {
     c = c.substr(0, c.length - 3);
    }
    if(c.substr(c.length - 3, 3) == ']]>')
    {
     c = c.substr(0, c.length - 3);
    }
    try
    {
     eval(c.trim());
    }
    catch(err)
    {
     if(console)
     {
      console.log('Captured JavaScript Error: ' + err)
     }
    }
   }
  }
  else
  {
   target.appendChild(o);
  }
 }

 this.write = function(id, s)
 {
  if(s == '')
  {
   return;
  }

  //var o = this.doc.createElement('ins');
  //o.innerHTML = s;
  //this.doc.getElementById(id).appendChild(o);
  //this.doc.getElementById(id).insertAdjacentHTML('beforeEnd',s); //innerHTML += s;

  var e = this.doc.createElement("div");
  e.innerHTML = s;
  var dl = 0;
  while(e.firstChild && dl < 100)
  {
   dl++;
   if(e.firstChild.nodeType == 1)
   {
    this.copyObject(e.firstChild, this.doc.getElementById(id));
   }
   else
   {
    this.doc.getElementById(id).appendChild(e.firstChild);
   }
  }
 }


 this.writeScript = function(id, url, callback)
 {
  this.writeScript_base(id, url, callback, false);
 }

 this.writeScript_base = function(id, url, callback, async)
 {
  var s, r, t;
  r = false;
  s = this.doc.createElement('script');
  s.type = 'text/javascript';
  s.src = url;
  s.readySet = false;
  s.idx = id;
  s.cbk = callback
  if(callback)
  {
   s.onreadystatechange = function()
   {
    if(!this.readySet && (!this.readyState || this.readyState == 'complete'))
    {
     this.readySet = true;
     this.cbk();
    }
   };

   s.onload = function()
   {
    if(!this.readySet)
    {
     this.readySet = true;
     this.cbk();
    }
   };
  }
  if(typeof(id) == 'object' && id.appendChild)
  {
   id.appendChild(s);
  }
  else
  {
   this.doc.getElementById(id).appendChild(s);
  }
 }

 this.writeFlash = function(id, o)
 {
  var asm_s = '';
  var swf = this.checkFlash();
  if(swf > 0)
  {
   if(typeof(o.overrideclk) == 'string' && o.overrideclk.substr(0, 4) == 'http')
   {
    asm_s += '<div style="width:' + o.w + 'px; border:0px solid white; margin:0px; padding:0px; position:relative;display: inline;">';
   }
   asm_s += '<span id="asmspan_' + o.rnd + '" class="asm_flash" style="font-size:1px; ' + (typeof(o.style) == 'string' ? o.style : '') + '"><' + 'object';
   asm_s += ' data="' + o.swf + '" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"  codebase="https://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=' + swf + ',0,0,0"';
   asm_s += ' id="adspiritflash' + o.rnd + '" width="' + o.w + '" height="' + o.h + '"  type="application/x-shockwave-flash">';
   asm_s += ' <' + 'param name="movie" value="' + o.swf + '">'
   o.flashvars += '&id=adspiritflash' + o.rnd;
   o.flashvars += '&player_id=adspiritflash' + o.rnd;
   asm_s += ' <' + 'param name="flashvars" value="' + o.flashvars + '"> ';
   asm_s += ' <' + 'param name="quality" value="autohigh"> ';
   asm_s += ' <' + 'param name="transparency" value="yes"> ';
   asm_s += ' <' + 'param name="allowFullScreen" value="true"> ';
   asm_s += ' <' + 'param name="allowScriptAccess" value="always"> ';
   asm_s += ' <' + 'param name="allowNetworking" value="all"> ';

   if(o.flashvars.indexOf('wmode=opaque') != -1)
   {
    asm_s += ' <' + 'param name="wmode" value="opaque"> ';
   }
   else if(o.flashvars.indexOf('wmode=window') != -1)
   {
    asm_s += ' <' + 'param name="wmode" value="window"> ';
   }
   else
   {
    asm_s += ' <' + 'param name="wmode" value="transparent"> ';
   }
   asm_s += ' <' + 'param name="swLiveConnect" value="true"> ';
   asm_s += ' <' + 'embed src="' + o.swf + '" flashvars="' + o.flashvars + '"';
   asm_s += ' allowNetworking="all" allowFullScreen="true" allowScriptAccess="always" name="adspiritflash' + o.rnd + '"';
   asm_s += '  transperency="yes" swLiveConnect="true" width="' + o.w + '" height="' + o.h + '"';
   asm_s += ' quality="autohigh" type="application/x-shockwave-flash" ';
   asm_s += ' pluginspage="https://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash" ';
   if(o.flashvars.indexOf('wmode=opaque') != -1)
   {
    asm_s += ' wmode="opaque" ';
   }
   else if(o.flashvars.indexOf('wmode=window') != -1)
   {
    asm_s += ' wmode="window" ';
   }
   else
   {
    asm_s += ' wmode="transparent" ';
   }
   asm_s += ' menu="false">';
   asm_s += ' </' + 'embed>';
   asm_s += '</' + 'object></span>';
   if(typeof(o.overrideclk) == 'string' && o.overrideclk.substr(0, 4) == 'http')
   {
    asm_s += '<div style="width:' + o.w + 'px; height:' + o.h + 'px; border:0px solid white; margin:0px; padding:0px; position:absolute; left:0px; top:0px; z-index:9999; display: inline"><a href="' + o.href + '" target="_blank"><img src="' + o.overrideclk + '" width="' + o.w + '" height="' + o.h + '" style="width:' + o.w + 'px; height:' + o.h + 'px;" border="0" alt=""></a></div></div>';
   }
   this.write(id, asm_s);
  }
  else
  {
   if(o.alturl != "")
   {
    this.write(id, '<a target="_blank" href="' + o.href + '"><img src="' + o.alturl + '" width="' + o.w + '" height="' + o.h + '" border="0" alt="' + o.alttext + '" style="width:' + o.w + 'px; height:' + o.h + 'px;"></a>');
   }
  }
  if(o.trackown != '')
  {
   this.write(id, '<div style="position:absolute; left:0px; top:0px;"><img src="' + o.trackown + '" border="0" height="1" width="1"></div>');
  }
  if(typeof(o.swf_onafterwrite) == "string" && o.swf_onafterwrite != '')
  {
   var asm_tmp_x_asm_swf_onafterwrite = o.swf_onafterwrite;
   o.swf_onafterwrite = "";
   eval(asm_tmp_x_asm_swf_onafterwrite + '();');
  }
 }


 this.pretargetings = new Object();
 this.startPretargeting = function(id, type, url, count, x, y, name)
 {
  idx = id.split('|');
  ido = id;
  prefix = "";
  preid = "";
  if(idx[2])
  {
   id = idx[0];
   prefix = idx[1];
   preid = idx[2];
  }
  this.pretargetings[id] = {
   "type": type,
   "url": url,
   "count": count,
   "x": x,
   "y": y,
   "name": name,
   "timer": window.setTimeout("window.asm_async_data.pretargetingDone(\'" + ido + "\');", 500),
   "data": "",
   "active": true
  };
 }

 this.single_pretargetings = new Object();
 this.addSingleCallPretargeting = function(id, callback)
 {
  idx = id.split('|');
  ido = id;
  prefix = "";
  preid = "";
  if(idx[2])
  {
   id = idx[0];
   prefix = idx[1];
   preid = idx[2];
  }

  if(!this.single_pretargetings[prefix + "x" + preid])
  {
   this.single_pretargetings[prefix + "x" + preid] = {"data": ""};
   callback();
  }
  else
  {
   this.addPretargeting(ido, this.single_pretargetings[prefix + "x" + preid].data)
  }
 }

 this.addPretargeting = function(id, data)
 {
  idx = id.split('|');
  ido = id;
  prefix = "";
  preid = "";
  if(idx[2])
  {
   id = idx[0];
   prefix = idx[1];
   preid = idx[2];
  }
  this.single_pretargetings[prefix + "x" + preid] = {"data": data};
  if(this.pretargetings[id])
  {
   if(data == "block")
   {
    this.pretargetings[id].active = false;
   }
   this.pretargetings[id].data += "&ptv" + prefix + 'x' + preid + "=" + encodeURIComponent(data);
   this.pretargetings[id].count--;
   if(this.pretargetings[id].count <= 0)
   {
    this.pretargetingDone(ido);
   }
  }
 }


 this.pretargetingDone = function(id)
 {
  idx = id.split('|');
  ido = id;
  prefix = "";
  preid = "";
  if(idx[2])
  {
   id = idx[0];
   prefix = idx[1];
   preid = idx[2];
  }
  if(this.pretargetings[id])
  {
   if(this.pretargetings[id].active)
   {
    this.pretargetings[id].active = false;
    var url = this.pretargetings[id].url + '&ptv=1&' + (this.pretargetings[id].data)
    if(this.pretargetings[id].type == 0)
    {
     this.writeScript(id, url, false);
    }
    else
    {
     this.write(id, '<iframe class="asm_paramiframe" id="asm_altifr_' + this.pretargetings[id].name + '" width="' + this.pretargetings[id].x + '" height="' + this.pretargetings[id].y + '" noresize="noresize" scrolling="no" frameborder="0" style="width:' + this.pretargetings[id].x + 'px; height:' + this.pretargetings[id].y + 'px; border:0px white solid !important;" marginheight="0" marginwidth="0" src="' + url + '" ALLOWTRANSPARENCY="true"></iframe>');
    }

   }
  }
 }

}

if(typeof String.prototype.trim !== 'function')
{
 String.prototype.trim = function()
 {
  return this.replace(/^\s+|\s+$/g, '');
 }
}

if(typeof(window.asm_async_data) != 'object')
{
 window.asm_async_data = new asm_async_obj();
}
window.asm_async_data.initi();
